from causallearn.search.ScoreBased.GES import ges
from causallearn.search.ConstraintBased.PC import pc

import networkx as nx
from networkx.readwrite import json_graph

import json

import pandas as pd
import matplotlib.pyplot as plt

# Use PC if Linear=true else use GES
LINEAR = True
# Use high/low income or real numbers
BINARY = True
# Remove the Fair column used for testing
REMOVE_FAIR = True

if __name__ == '__main__':
    # Load the dataset
    if BINARY:
        data = pd.read_csv("Generated60000_binary_fair.csv")
    else:
        data = pd.read_csv("Generated60000_fair.csv")
    if REMOVE_FAIR:
        data.drop('Income_Fair', axis=1, inplace=True)
    data_np = data.values

    if LINEAR:
        # Run PC
        pc_result = pc(data_np, alpha=0.05)
        causal_graph = pc_result.G  # Use this line if running PC
    else:
        # Run the GES algorithm
        ges_result = ges(data_np)
        causal_graph = ges_result['G']  # Extract the GeneralGraph object

    # Convert the causal graph adjacency matrix to a networkx DiGraph
    G = nx.DiGraph()
    labels = data.columns  # Column names as labels

    # Extract edges based on adjacency matrix
    for i in range(causal_graph.num_vars):
        for j in range(causal_graph.num_vars):
            if causal_graph.graph[i, j] == -1:  # Check for directed edge i -> j
                G.add_edge(labels[i], labels[j])

    # Write edges to json
    with open('CausalDAG.json', 'w') as fp:
        json.dump(json_graph.node_link_data(G, edges="edges"), fp)

    # Plot the graph with networkx and matplotlib
    plt.figure(figsize=(5, 4))
    nx.draw(G, with_labels=True, node_size=3000, node_color="skyblue",
            font_size=12, font_weight="bold", pos=nx.spring_layout(G))
    if LINEAR:
        plt.title("Causal DAG generated by PC")
    else:
        plt.title("Causal DAG generated by GES")
    plt.savefig('CausalDAG.png')
    # plt.show()
